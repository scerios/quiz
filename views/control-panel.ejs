<div class="row">
    <div class="col-4">
        <div class="row">
            <%- include('partials/category-buttons'); %>
        </div>
    </div>
    <div class="col-4">
        <table class="table table-hover text-center">
            <thead>
                <tr>
                    <th scope="col"><%- controlPanel.playersTableHead.name %></th>
                    <th scope="col"><%- controlPanel.playersTableHead.points %></th>
                    <th scope="col"><%- controlPanel.playersTableHead.authorizeBtn %></th>
                </tr>
            </thead>
            <tbody id="player-table-body">
                <%- include('partials/players'); %>
            </tbody>
        </table>
    </div>
    <div class="col-4">
        <div class="row">
            <div class="form-group max-width default-padding">
                <label for="timer"><%- controlPanel.timer %></label>
                <input type="numbers" class="form-control" id="timer">
                <small class="form-text text-muted"><%- controlPanel.timerLegend %></small>
            </div>
            <div class="form-group max-width default-padding">
                <button id="evaluate-btn" type="button" class="btn btn-info btn-lg btn-block"><%- controlPanel.evaluateBtn %></button>
            </div>
        </div>
    </div>
    <div id="evaluation-table-container" class="col-12">
        <table class="table table-hover text-center">
            <thead>
                <tr>
                    <th scope="col"><%- controlPanel.evaluationTableHead.name %></th>
                    <th scope="col"><%- controlPanel.evaluationTableHead.timeLeft %></th>
                    <th scope="col"><%- controlPanel.evaluationTableHead.answer %></th>
                    <th scope="col"><%- controlPanel.evaluationTableHead.evaluate %></th>
                </tr>
            </thead>
            <tbody id="evaluation-table-body">
            </tbody>
        </table>
    </div>
</div>
<script src="/socket.io/socket.io.js"></script>
<script>
    let socket = io();
    let isEvaluationTableShown = false;
    let playerTableBody = $('#player-table-body');
    let evaluationTableContainer = $('#evaluation-table-container');
    let evaluationTableBody = $('#evaluation-table-body');
    let categoryBtn = $('.btn-category');
    let timer = $('#timer');
    let evaluateBtn = $('#evaluate-btn');

    $(document).ready(() => {
        socket.emit('postAdminSocketId');
        timer.val(0);
    });

    socket.on('showPlayer', (data) => {
        addPlayerToList(data.player);
    });

    socket.on('playerLeft', (data) => {
        $(document).find('#' + data.playerSocketId).remove();
    });

    socket.on('getAnswer', (data) => {
        addAnswerToEvaluationTable(data.player);
    });

    categoryBtn.on('click', function () {
        socket.emit('pickQuestion', { categoryId: $(this).attr('data-category-id'), index: getCategoryIndexAndUpdateElement($(this)), timer: timer.val() });

        if (getHowManyCategoryLeft(categoryBtn) === 0) {
            let index = getCategoryIndexAndEnableAllCategories(categoryBtn);
            socket.emit('raiseCategoryLimit', { index: parseInt(index) });
        }
    });

    timer.on('blur', function() {
        if (timer.val() === '') {
            timer.val(0);
        }
    });

    evaluateBtn.on('click', function() {
        let evaluationBox = $(document).find('.evaluate');
        let correct = [];
        let incorrect = [];

        for (let i = 0; i < evaluationBox.length; i++) {
            if ($(evaluationBox[i]).prop('checked')) {
                correct.push({
                    id: $(evaluationBox[i]).attr('data-id'),
                    socketId: $(evaluationBox[i]).attr('data-socket-id'),
                    point: parseInt($('#' + $(evaluationBox[i]).attr('data-socket-id') + '-point').text())
                });
                let point = $(document).find('#' + $(evaluationBox[i]).attr('data-socket-id') + '-point');
                point.text(parseInt(point.text()) + 2);
            } else {
                incorrect.push($(evaluationBox[i]).attr('data-id'));
            }
        }
        socket.emit('finishQuestion', { correct: correct, incorrect: incorrect });
        evaluationTableBody.html('');
        evaluationTableContainer.fadeOut();
    });

    function addPlayerToList(player) {
        let playerListHtml = playerTableBody.html();
        playerListHtml += '<tr id="' + player.socket_id + '">' +
            '                   <td>' + player.name + '</td>' +
            '                   <td id="' + player.socket_id + '-point">' + player.point + '</td>' +
            '                   <td>' +
            '                       <button type="button" class="btn btn-info btn-sm btn-authorize" data-socket-id="' + player.socket_id + '">' +
            '                           <%= controlPanel.authorizeBtn %>' +
            '                       </button>' +
            '                   </td>' +
            '               </tr>';
        playerTableBody.html(playerListHtml);
    }

    function getCategoryIndexAndUpdateElement(element) {
        let index = element.attr('data-category-index');
        index++;
        if (index % 3 === 0) {
            element.prop('disabled', true);
            element.removeClass('btn-success');
            element.addClass('btn-warning');
        }
        element.attr('data-category-index', index);
        return index;
    }

    function getHowManyCategoryLeft(categories) {
        counter = 0;
        for (let i = 0; i < categories.length; i++) {
            if (!$(categories[i]).prop('disabled')) {
                counter++;
            }
        }
        return counter;
    }

    function getCategoryIndexAndEnableAllCategories(categories) {
        let index = 0;
        for (let i = 0; i < categories.length; i++) {
            $(categories[i]).prop('disabled', false);
            $(categories[i]).removeClass('btn-warning');
            $(categories[i]).addClass('btn-success');
            if (i === 0) {
                index = $(categories[i]).attr('data-category-index');
            }
        }
        return index;
    }

    function addAnswerToEvaluationTable(player) {
        if (!isEvaluationTableShown) {
            evaluationTableContainer.fadeIn();
            isEvaluationTableShown = true;
        }
        let evaluationTableBodyHtml = evaluationTableBody.html();
        evaluationTableBodyHtml += '<tr>' +
                   '                    <td>' + player.name + '</td>' +
                   '                    <td>' + player.timeLeft + '</td>' +
                   '                    <td>' + player.answer + '</td>' +
                   '                    <td>' +
                   '                        <div class="form-group">' +
                   '                            <div class="custom-control custom-switch">' +
                   '                                <input type="checkbox" class="custom-control-input evaluate" id="' + player.id + '-evaluate"' +
                   '                                       data-id="' + player.id + '" data-socket-id="' + player.socketId + '">' +
                   '                                <label class="custom-control-label" for="' + player.id + '-evaluate"></label>' +
                   '                            </div>' +
                   '                        </div>' +
                   '                    </td>' +
                   '                </tr>';

        evaluationTableBody.html(evaluationTableBodyHtml);
    }

</script>
<style>
    #logo-container {
        display: none;
    }


    .container {
        max-width: 100%;
    }
</style>