<div class="row">
    <div id="logout-btn-container" class="col-12">
        <form action="/logout" method="GET">
            <button type="submit" class="btn btn-dark max-width"><%- gameBoard.logoutBtn %></button>
        </form>
    </div>
    <div class="col-4 text-center">
        <div class="card text-white bg-secondary mb-3">
            <div class="card-header">
                <%- gameBoard.question %>
            </div>
            <div class="card-body">
                <h4 class="card-title"><%- gameBoard.category %>: <span id="question-category"></span></h4>
                <p id="question" class="card-text"></p>
            </div>
        </div>
    </div>
    <div class="col-4 text-center">
        <div id="timer-container" class="card text-white bg-success mb-3">
            <div class="card-header">
                <%- gameBoard.timer %>
            </div>
            <div class="card-body">
                <h4 id="timer" class="card-title"></h4>
            </div>
        </div>
    </div>
    <div class="col-4 text-center">
        <div class="card text-white bg-secondary mb-3">
            <div class="card-header">
                <%- gameBoard.answer %>
            </div>
            <div class="card-body">
                <div class="form-group">
                      <textarea disabled class="form-control" id="answer" rows="3"></textarea>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="/socket.io/socket.io.js"></script>
<script>
    let socket = io();
    let adminSocketId = '';
    let myId = <%- gameBoard.myId %>;

    let questionCategory = $('#question-category');
    let question = $('#question');
    let timerContainer = $('#timer-container');
    let timer = $('#timer');
    let answer = $('#answer');

    let isPrimary = false;
    let isWarning = false;

    $(document).ready(() => {
        socket.emit('signUpForGame', {
            playerId: myId
        });
    });

    socket.on('adminSocketId', (data) => {
        adminSocketId = data.adminSocketId;
    });

    socket.on('getNextQuestion', (data) => {
        if (data.timer === 0) {
            timer.html('<i class="fas fa-infinity"></i>');
        } else {
            timer.text(data.timer);

            let counter = setInterval(() => {
                time = parseFloat(timer.text());

                changeTimerColor(time);

                if (time === 0) {
                    clearInterval(counter);
                } else {
                    timer.text((time - 0.1).toFixed(1));
                }
            }, 100);
        }
        answer.prop('disabled', false);
        questionCategory.text(data.category);
        question.text(data.question);
    });

    function changeTimerColor(time) {
        if (time < 15 && !isPrimary) {
            timerContainer.removeClass('bg-success');
            timerContainer.addClass('bg-primary');
            isPrimary = true;
        }

        if (time < 5 && !isWarning) {
            timerContainer.removeClass('bg-primary');
            timerContainer.addClass('bg-warning');
            isWarning = true;
        }
    }

</script>
<style>
    #logo-container {
        display: none;
    }
</style>